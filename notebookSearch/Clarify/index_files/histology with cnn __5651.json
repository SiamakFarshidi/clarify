{"name": "histology with cnn ", "full_name": " h1 Import the necessary libraries and load the data h1 Load the data and explore a few images ", "stargazers_count": 0, "forks_count": 0, "description": " Import the necessary libraries and load the data Load the data and explore a few images This step was done using Kevin s notebook https www kaggle com kmader histology mnist loading and processing data methods Now all our images were read and are displayed as numpy arrays For those unfamiliar with the concept each pixel in the image is represented by a 3 sized array where each element represents the intensity of red green blue colors ranging from 0 to 255 Our dataframe is already prepared for us to classify an image into one of the cell type Let s load an image for each cell type to see how they look like We can see here the 7 existing cell types in the dataset From what I can see stroma and complex cells are very similar I m no hematologist and perhaps our predictor will be more confused when looking at these two types Here I ll be using Keras tensorflow backend to create a Convolutional Neural Network CNN that I hope will be capable of discriminating these cell types well There are lots of tutorial on the web in this topic such as this one http cs231n github io convolutional networks and this one https medium freecodecamp org an intuitive guide to convolutional neural networks 260c2de0a050 so I won t go deep into the theory behind it here Below I ll just point out a few relevant aspects about CNNs so we can follow up the reasoning and build a basic one Conv http adeshpande3 github io assets Cover png Image source https adeshpande3 github io A Beginner 27s Guide To Understanding Convolutional Neural Networks Basically to build a simple CNN we use three kind of layers convolutional pooling and fully connected The convolutional layer will apply a filter also called a kernel to map the input image into another kind of image in the new layer as depicted in the image below Conv2 https cdn images 1 medium com max 800 1 EuSjHyyDRPAQUdKCKLTgIQ png Image source https medium freecodecamp org an intuitive guide to convolutional neural networks 260c2de0a050 Here the numbers in the filter are the weights our algorithm will try to predict in order to get the best results possible You may notice that all the nine elements from the input image were mapped into a single one in the new layer This operation of multiplying the filter elements by a few elements of an image is what give the name to this kind of network roughly saying this is what a convolution is For a more mathematical definition you can check Ian Goodfellow s book chapter 9 https www deeplearningbook org contents convnets html In the second layer type we do what is called pooling which can be commonly seen following every one or two convolutional layers This is done to reduce dimensionality so the number of parameters used to train the network is reduced As a direct effect the training time and overfitting issues are reduced as well Below we can see a maxpooling layer This kind of pooling takes the highest number in a given kernel size the size of the colored squares on the input image below and outputs it to the next layer maxpool https cdn images 1 medium com max 800 1 vbfPq HvBCkAcZhiSTZybg png Image source https medium freecodecamp org an intuitive guide to convolutional neural networks 260c2de0a050 After using a given number of convolutional pooling layers we can feed the output into a fully connected layer which is the usual layer in a Multilayer Perceptron MLP https machinelearningmastery com neural networks crash course For our problem is a multiclass classification we ll use softmax https www quora com What is the intuition behind SoftMax function as the final activation function that will give the probability of the image belonging to each of the classes cell types First let s create a 4 rank tensor see it as a 4 dimensional array I tried to feed the Keras model directly with df images but I couldn t reshape it into a 4 d input If anyone has an idea how to do it I d be glad to get feedback So the functions below just get the path to the image and load it into the shape 150 150 3 using the image package from keras preprocessing Now I will use LabelBinarizer to make our outputs either 0 or 1 For instance our outputs can be STROMA DEBRIS ADIPOSE MUCOSA EMPTY TUMOR LYMPHO COMPLEX So let s say a cell is MUCOSA Then after using LabelBinarizer the label would be 0 0 0 1 0 0 0 0 When we run our model it will give probabilities like 0 0 2 0 1 0 7 0 0 0 0 so the cell could be identified as mucosa with 70 of certainty I also split the dataset into training validation and test tensors Now I ll run the CNN itself The architecture will be 3 Conv2D Dropout Maxpooling 4 times followed by a global maxpooling At the end I run the outputs through a fully connected layer to get the probabilities The test accuracy is about 77 83 and validation loss ranging from 0 7 to 0 5 depending on weight s initialization Not bad at all for a pretty straightforward model trying to identify 7 types of cells I tried to use a simpler network such as using 1 Conv2D Dropout Maxpooling but the model wasn t able to learn at all I ve made some tests using higher and lower dropouts but 0 3 was the optimal value as far as I could find out The objective now is to make a more robust architecture to improve the accuracy my goal is to at least get 85 I hope this small notebook is helpful to people trying to learn about CNN and how to make them in Keras using this wonderful dataset  linear algebra data processing CSV file I O e g pd read csv deal with paths deal with paths deal with images read images from files make plots pretty plots P get unique cell types get the first row containing an image of cell type cell list containing one image of each type create the subplots show the images and label them loads RGB image as PIL Image Image type convert PIL Image Image type to 3D tensor with shape 150 150 3 convert 3D tensor to 4D tensor with shape 1 150 150 3 and return 4D tensor ", "id": "hrmello/histology-with-cnn", "size": "5651", "language": "python", "html_url": "https://www.kaggle.com/code/hrmello/histology-with-cnn", "git_url": "https://www.kaggle.com/code/hrmello/histology-with-cnn"}