{"name": "fast mtcnn detector 55 fps at full resolution ", "full_name": " h1 Fast MTCNN detector h2 Algorithm h2 Other resources h2 Imports h2 The FastMTCNN class h2 Full resolution detection h2 Half resolution detection ", "stargazers_count": 0, "forks_count": 0, "description": " Fast MTCNN detector This notebook demonstrates how to achieve 45 frames per second speeds for loading frames and detecting faces on full resolution videos Algorithm Striding The algorithm used is a strided modification of MTCNN in which face detection is performed on only every N frames and applied to all frames For example with a batch of 9 frames we could pass frames 0 3 and 6 to MTCNN Then the bounding boxes and potentially landmarks returned for frame 0 would be naively applied to frames 1 and 2 Similarly the detections for frame 3 are applied to frames 4 and 5 and the detections for frames 6 are applied to frames 7 and 8 Although this assume that faces do not move between frames significantly this is generally a good approximation for low stride numbers If the stride is 3 we are assuming that the face does not significantly alter position for an additional 2 frames or 0 07 seconds If faces are moving faster than this they are likely to be extremely blurry anyway Furthermore ensuring that faces are cropped with a small margin mitigates the impact of face drift Scale pyramid The algorithm uses a slightly smaller scaling factor 0 6 vs 0 709 than the original MTCNN algorithm to construct the scaling pyramid applied to input images For details of the scaling pyramid see the original paper https arxiv org abs 1604 02878 for details of the scaling pyramid approach Multi threading A modest performance gain comes from loading video frames with cv2 VideoCapture using threading This functionality is provided by the FileVideoStream class of the imutils package Other resources See the following kernel for a guide to using the MTCNN functionality of facenet pytorch https www kaggle com timesler guide to mtcnn in facenet pytorch Imports The FastMTCNN class The class below is a thin wrapper for the MTCNN implementation in the facenet pytorch package that implements the algorithm described above Full resolution detection In this example we demonstrate how to detect faces using full resolution frames i e resize 1 Half resolution detection In this example we demonstrate how to detect faces using half resolution frames i e resize 0 5  Install facenet pytorch with internet use pip install facenet pytorch ", "id": "timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "size": "2265", "language": "python", "html_url": "https://www.kaggle.com/code/timesler/fast-mtcnn-detector-55-fps-at-full-resolution", "git_url": "https://www.kaggle.com/code/timesler/fast-mtcnn-detector-55-fps-at-full-resolution"}