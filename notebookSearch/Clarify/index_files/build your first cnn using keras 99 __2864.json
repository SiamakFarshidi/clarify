{"name": "build your first cnn using keras 99 ", "full_name": " h1 Build your first Convolutional Neural Network using Keras h3 This notebook will be your first step towards CNNs and Deep Learning h1 Introduction h1 Data h3 Importing Data h3 Exploring Data h3 Preprocessing h3 Splitting h1 CNN h3 Defining the model h3 Compiling the model with the right Optimizer loss and metric h3 Training the model h1 Evaluation h3 Evaluating the model h3 Visualizing the model s performance h1 Prediction and submission h3 Thank you for reading ", "stargazers_count": 0, "forks_count": 0, "description": " Build your first Convolutional Neural Network using Keras This notebook will be your first step towards CNNs and Deep Learning 1 Introduction 2 Data 2 1 Importing Data 2 2 Exploring Data 2 3 Preprocessing 2 4 Splitting 3 CNN 3 1 Defining the model 3 2 Compiling the model with the right Optimizer loss and metric 3 3 Training the model 4 Evaluation 4 1 Evaluating the model 4 2 Visualizing the model s performance 5 Prediction and submission Introduction CNNs short for Convolutionary Neural Networks are a class of neural networks mostly used for dealing with image or video data br Convolutional networks were inspired by biological processes in that the connectivity pattern between neurons resembles the organization of the animal visual cortex br CNNs apply filters to images in order to extract different features small edges curvatures etc and big whole shapes patterns etc br Data Importing Data First thing to do is import all the libraries you re going to need Exploring Data After printing out the shapes of train and evaluation you can see that the train set contains 1 additional column use head to have a look at the first 5 rows of the data As shown the first row label is the class of each instance which should be our output br Now let s see if our data contains any flaws br Check if the dataset contains any null values Preprocessing Take the labels column out and use describe to have some insight on the data As we know the images come in a grayscale format where all the values are between 0 255 a good thing you should do is standarize the data which makes it easier for the model to converge br Standarization transforms the data in a way that scales all the values between 0 1 you can do this easily by dividing all values by 255 since our values come in a 0 255 range Now let s describe our dataset again and notice if the standard deviation std is any different The standard deviation is much lower now good job br Let s check out one random sample using the imshow function Splitting Split the data into train and test segments a 0 1 0 2 test train ratio is good for most cases CNN Defining the model Our model will be 2 layers of 2x Conv2D 1x Maxpooling 1x BatchNorm 1x Dropout 2 Dense layers and 1 output layer br You can mess around with the number of layers and parameters of each layer and see how it affects your evaluation score Compiling the model with the right Optimizer loss and metric You can try and use other optimizers such as SGD Adam works very well Training the model Evaluation Evaluating the model Visualizing the model s performance Prediction and submission Thank you for reading  Import the input files ", "id": "ayhmrba/build-your-first-cnn-using-keras-99", "size": "2864", "language": "python", "html_url": "https://www.kaggle.com/code/ayhmrba/build-your-first-cnn-using-keras-99", "git_url": "https://www.kaggle.com/code/ayhmrba/build-your-first-cnn-using-keras-99"}