{"name": "cutmix in python ", "full_name": " h1 Improving Classification and Object Detection h1 using CutMix Augmentation h2 Loading Data h2 Generating a Batch of Data h2 Generating Random Bounding Box h2 A CutMix Image Generation h2 References ", "stargazers_count": 0, "forks_count": 0, "description": " center Improving Classification and Object Detection center center using CutMix Augmentation center Supplementary to my medium article https medium com ZenFeather cutmix augmentation in python bf099a97afac The paper CutMix Regularization Strategy to Train Strong Classifiers with Localizable Features published in ICCV 2019 proposed the CutMix augmentation strategy to improve deep learning based classification and localization tasks In this augmentation technique patches are cut and pasted among training images where interestingly the ground truth labels are also mixed proportionally to the area of the patches By making efficient use of training pixels and retaining the regularization effect of regional dropout CutMix consistently outperformed the state of the art augmentation strategies on CIFAR and ImageNet classification tasks as well as on the ImageNet weakly supervised localization task The paper also shows that CutMix improves the model robustness against input corruptions and its out of distribution detection performances In the following table we can see the performance boost obtained by adopting CutMix augmentation image png attachment image png Let s start Loading Data To show the result of CutMix augmentation we will use a set of images containing images of wheat field showing wheat heads These images are takes from Kaggle s Glbal Wheat Detection competition dataset Generating a Batch of Data Now we will create a set or batch of 4 images Let s assume that this batch is a minibacth generated by a dataloader that loads minibatches during the training of the deep neural network model In general the bacth loaded by a dataloader also includes a batch of image labels if we are solving a classification problem We will randomly assign a label to each image from from the set of 0 1 2 We will further one hot encode https scikit learn org stable modules generated sklearn preprocessing OneHotEncoder html these labels to 1 0 0 0 1 0 0 0 1 Please follow this https stanford edu shervine blog pytorch how to generate data parallel to learn more about dataloaders in PyTorch Generating Random Bounding Box Here is a function to generate a random bounding box in an image Now let s test the function by generating a random bounding box and crop an image using that bounding box A CutMix Image Generation In CutMix algorithm for each image of batch a random region in our case a random bounding box region is replaced with a patch from another training image The parameter lambda that determines the size of the bounding box is stochastically sampled from a Beta distribution https en wikipedia org wiki Beta distribution The label of each resultant augmented image is estimated as a weighted sum of the original label and the label of the image from which the modified patch is borrowed where weights are lambda and 1 lambda respectively Now you can use CutMix augmentation in training you deep neural network model For more details please follow the references If you have any questions please put them in the comment section References https arxiv org pdf 1905 04899 pdf https github com clovaai CutMix PyTorch  Import glob to parse filenames Import numpy Plot Opencv Path to data Read filenames in the data folder Read first 10 filenames Display a sample image Create batch of 4 images label temp 2 Convert image batch to numpy array Conver image batch labels to numpy array Print labels Show images uniform Read an image Crop a random bounding box Draw bounding box on the image Show cropped image generate mixed sample adjust lambda to exactly match pixel ratio Generate CutMix image Let s use the first image of the batch as the input image to be augmented Show original images Show CutMix images Print labels ", "id": "debanga/cutmix-in-python", "size": "3273", "language": "python", "html_url": "https://www.kaggle.com/code/debanga/cutmix-in-python", "git_url": "https://www.kaggle.com/code/debanga/cutmix-in-python"}